1. Validate Binary Search Tree: Check if a binary tree is a valid binary search tree (BST).

bool isBSTUtil(struct Node *root, int minVal, int maxVal) {
    // Base case
    if (root == NULL) {
        return true;
    }

    // Check if the root's data violates BST property
    if (root->data <= minVal || root->data >= maxVal) {
        return false;
    }

    // Recursively check the left and right subtrees with updated ranges
    return isBSTUtil(root->left, minVal, root->data) &&
           isBSTUtil(root->right, root->data, maxVal);
}


2. Kth Smallest Element in a BST: Find the kth smallest element in a BST.

int kthSmallestUtil(struct Node *root, int *k) {
    // Base case
    if (root == NULL) {
        return -1; // Not found
    }

    // Search in the left subtree
    int left = kthSmallestUtil(root->left, k);
    if (left != -1) {
        return left; // Found in left subtree
    }

    // Check if the root is the kth smallest
    (*k)--;
    if (*k == 0) {
        return root->data;
    }

    // Search in the right subtree
    return kthSmallestUtil(root->right, k);
}

3. Lowest Common Ancestor of a BST: Find the lowest common ancestor (LCA) in a BST.

TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
    if (!root) return NULL;
    if (root->val > p->val && root->val > q->val) 
        return lowestCommonAncestor(root->left, p, q);
    if (root->val < p->val && root->val < q->val) 
        return lowestCommonAncestor(root->right, p, q);
    return root;
}

4. Insert into a Binary Search Tree: Insert an element into a binary search tree.

TreeNode* insertIntoBST(TreeNode* root, int val) {
    if (!root) return new TreeNode(val);
    if (val < root->val) root->left = insertIntoBST(root->left, val);
    else root->right = insertIntoBST(root->right, val);
    return root;
}

5. Delete Node in a BST: Given a root node reference of a BST and a key, delete the node with the given key in the BST.

TreeNode* deleteNode(TreeNode* root, int key) {
    if (!root) return NULL;
    if (key < root->val) root->left = deleteNode(root->left, key);
    else if (key > root->val) root->right = deleteNode(root->right, key);
    else {
        if (!root->left) return root->right;
        else if (!root->right) return root->left;
        TreeNode* minNode = findMin(root->right);
        root->val = minNode->val;
        root->right = deleteNode(root->right, root->val);
    }
    return root;
}

TreeNode* findMin(TreeNode* node) {
    while (node->left) node = node->left;
    return node;
}

6. Binary Search Tree Iterator: Implement an iterator over a BST with the functions next() and hasNext(). It should iterate the BST in ascending order.

class BSTIterator {
private:
    stack<TreeNode*> st;
    void pushAll(TreeNode* node) {
        for (; node != NULL; st.push(node), node = node->left);
    }

public:
    BSTIterator(TreeNode* root) {
        pushAll(root);
    }
    
    int next() {
        TreeNode* tmpNode = st.top();
        st.pop();
        pushAll(tmpNode->right);
        return tmpNode->val;
    }
    
    bool hasNext() {
        return !st.empty();
    }
};

7. Range Sum of BST: Given the root node of a BST and two numbers, return the sum of values of all nodes with a value in the range.

int rangeSumBST(TreeNode* root, int low, int high) {
    if (!root) return 0;
    if (root->val < low) return rangeSumBST(root->right, low, high);
    if (root->val > high) return rangeSumBST(root->left, low, high);
    return root->val + rangeSumBST(root->left, low, high) + rangeSumBST(root->right, low, high);
}

8. BST to Greater Sum Tree: Convert a BST into a Greater Tree where every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.

TreeNode* bstToGst(TreeNode* root) {
    int sum = 0;
    inorderReverse(root, sum);
    return root;
}

void inorderReverse(TreeNode* node, int& sum) {
    if (!node) return;
    inorderReverse(node->right, sum);
    sum += node->val;
    node->val = sum;
    inorderReverse(node->left, sum);
}

9. Recover Binary Search Tree: Two elements of a BST are swapped by mistake. Recover the tree without changing its structure.

void recoverTree(TreeNode* root) {
    TreeNode *first = NULL, *second = NULL, *prev = NULL;
    inorder(root, first, second, prev);
    swap(first->val, second->val);
}

void inorder(TreeNode* root, TreeNode*& first, TreeNode*& second, TreeNode*& prev) {
    if (!root) return;
    inorder(root->left, first, second, prev);
    if (prev && prev->val > root->val) {
        if (!first) first = prev;
        second = root;
    }
    prev = root;
    inorder(root->right, first, second, prev);
}

10. Find Mode in Binary Search Tree: Find all the modes (the most frequently occurring element) in the BST

vector<int> findMode(TreeNode* root) {
    vector<int> modes;
    int maxCount = 0, currentCount = 0, currentVal = 0;
    inorder(root, modes, maxCount, currentCount, currentVal);
    return modes;
}

void inorder(TreeNode* root, vector<int>& modes, int& maxCount, int& currentCount, int& currentVal) {
    if (!root) return;
    inorder(root->left, modes, maxCount, currentCount, currentVal);
    if (root->val != currentVal) {
        currentVal = root->val;
        currentCount = 0;
    }
    currentCount++;
    if (currentCount > maxCount) {
        maxCount = currentCount;
        modes.clear();
        modes.push_back(currentVal);
    } else if (currentCount == maxCount) {
        modes.push_back(currentVal);
    }
    inorder(root->right, modes, maxCount, currentCount, currentVal);
}

11. Write a C program to find the mininum value in a binary search tree.

int minValue(struct node* node)
{
    struct node* current = node;
    while (current->left != NULL)
    {
        current = current->left;
    }
    return(current->data);
}

12. Insert node into binary tree, print and do symmetric check

#include <stdio.h>
#include <stdlib.h>

// Node structure for the binary tree
struct Node {
    int data;
    struct Node *left;
    struct Node *right;
};

// Function to create a new node
struct Node* newNode(int data) {
    struct Node* node = (struct Node*)malloc(sizeof(struct Node));
    node->data = data;
    node->left = node->right = NULL;
    return node;
}

// Recursive insertion function
struct Node* insert(struct Node* root, int data) {
    // If the tree is empty, return a new node
    if (root == NULL) 
        return newNode(data);

    // Otherwise, recur down the tree
    if (data < root->data)
        root->left = insert(root->left, data);
    else if (data > root->data)
        root->right = insert(root->right, data);

    // Return the (unchanged) node pointer
    return root;
}

// Function to print the tree in inorder traversal
void inorder(struct Node* root) {
    if (root != NULL) {
        inorder(root->left);
        printf("%d ", root->data);
        inorder(root->right);
    }
}

void printTree(struct Node* root) {
    if (root != NULL) {
        printTree(root->left);
        printf("%d ", root->data);
        printTree(root->right);
    }
}

// Helper function to check if two trees are mirror images
bool isMirror(struct Node* root1, struct Node* root2) {
    if (root1 == NULL && root2 == NULL)
        return true;

    if (root1 != NULL && root2 != NULL && root1->data == root2->data)
        return   
 isMirror(root1->left, root2->right) && isMirror(root1->right, root2->left);

    return false;   

}

// Function to check if the tree is symmetric
bool isSymmetric(struct Node* root) {
    return isMirror(root, root);
}

int main() {
    printf("Inorder traversal (printTree): \n");
    printTree(root);
    printf("\n");

    if (isSymmetric(root))
        printf("The tree is symmetric.\n");
    else
        printf("The tree is not symmetric.\n");

    return 0;
}

13.2) Two binary trees with the same structure but different values in their nodes are called structurally identical binary trees or structurally equivalent binary trees.

These trees have identical shapes or forms, meaning they have the same arrangement of nodes and edges, but the values stored in the nodes may differ between the two trees.

Write a function to check if L & R sub-trees for root node of array are structurally identical.
e.g.

    10
   /  \
  5    20
 / \   / \
3  7  14  30
(True - Same sub-trees structures ignoring element values)

   10
  /  \
 5   20
  \    \
   7   30
(True : Same sub-trees structures)

    10
   /  \
  5    20
   \   /
   7   14
(False : Different sub-trees structures)

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

// ... (Node structure, newNode, insert, printTree, isMirror, isSymmetric remain the same)

// Function to check if two trees are structurally identical
bool isStructurallyIdentical(struct Node* a, struct Node* b) {
    // Both trees are empty
    if (a == NULL && b == NULL)
        return true;

    // Both trees are non-empty and have the same structure
    if (a != NULL && b != NULL)
        return isStructurallyIdentical(a->left, b->left) && 
               isStructurallyIdentical(a->right, b->right);

    // Otherwise, they are not structurally identical
    return false;
}

// Function to check if left and right subtrees of a node are structurally identical
bool areSubtreesIdentical(struct Node* root) {
    if (root == NULL)
        return true;

    return isStructurallyIdentical(root->left, root->right);
}

int main() {
    // ... (Tree creation and insertion)

    if (areSubtreesIdentical(root))
        printf("Left and right subtrees of the root are structurally identical.\n");
    else
        printf("Left and right subtrees of the root are not structurally identical.\n");

    return 0;
}
