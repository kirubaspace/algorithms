1. Implement Queue using Stacks: Implement a first-in-first-out (FIFO) queue using only two stacks.

class MyQueue {
private:
    stack<int> s1, s2;

    void transfer(stack<int>& source, stack<int>& target) {
        while (!source.empty()) {
            target.push(source.top());
            source.pop();
        }
    }

public:
    void push(int x) {
        s1.push(x);
    }

    int pop() {
        if (s2.empty()) transfer(s1, s2);
        int x = s2.top(); s2.pop();
        return x;
    }

    int peek() {
        if (s2.empty()) transfer(s1, s2);
        return s2.top();
    }

    bool empty() {
        return s1.empty() && s2.empty();
    }
};

2. Walls and Gates: You are given a m x n 2D grid initialized with these three possible values: -1 representing a wall or an obstacle, 0 representing a gate, and INF representing an empty room. Fill each empty room with the distance to its nearest gate.

void wallsAndGates(vector<vector<int>>& rooms) {
    int m = rooms.size(), n = m ? rooms[0].size() : 0;
    queue<pair<int, int>> q;
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            if (rooms[i][j] == 0) q.push({i, j});
        }
    }
    vector<vector<int>> dirs{{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    while (!q.empty()) {
        int i = q.front().first, j = q.front().second; q.pop();
        for (auto dir : dirs) {
            int x = i + dir[0], y = j + dir[1];
            if (x < 0 || x >= m || y < 0 || y >= n || rooms[x][y] < INT_MAX) continue;
            rooms[x][y] = rooms[i][j] + 1;
            q.push({x, y});
        }
    }
}

3. Rotting Oranges: In a given grid, each cell can have one of three values: the value 0 representing an empty cell, the value 1 representing a fresh orange, or the value 2 representing a rotten orange. Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten. Return the minimum number of minutes that must elapse until no cell has a fresh orange.

int orangesRotting(vector<vector<int>>& grid) {
    int m = grid.size(), n = grid[0].size(), fresh = 0, mins = 0;
    queue<pair<int, int>> q;
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            if (grid[i][j] == 2) q.push({i, j});
            else if (grid[i][j] == 1) fresh++;
        }
    }
    vector<vector<int>> dirs{{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    while (!q.empty() && fresh) {
        for (int i = q.size(); i > 0; --i) {
            int x = q.front().first, y = q.front().second; q.pop();
            for (auto dir : dirs) {
                int nx = x + dir[0], ny = y + dir[1];
                if (nx < 0 || nx >= m || ny < 0 || ny >= n || grid[nx][ny] != 1) continue;
                grid[nx][ny] = 2;
                q.push({nx, ny});
                fresh--;
            }
        }
        mins++;
    }
    return fresh ? -1 : mins;
}

5. Sliding Window Maximum: Given an array and an integer K, find the maximum for each and every contiguous subarray of size K.

vector<int> maxSlidingWindow(vector<int>& nums, int k) {
    deque<int> dq;
    vector<int> ans;
    for (int i = 0; i < nums.size(); i++) {
        while (!dq.empty() && dq.front() == i - k) dq.pop_front();
        while (!dq.empty() && nums[dq.back()] < nums[i]) dq.pop_back();
        dq.push_back(i);
        if (i >= k - 1) ans.push_back(nums[dq.front()]);
    }
    return ans;
}
