1. Find the Duplicate Number: Given an array containing n+1 integers where each integer is between 1 and n (inclusive), 
prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.

func findDuplicate(nums []int) int {
    // Initialize both pointers to first element
    slow := nums[0]
    fast := nums[0]
    
    // Phase 1: Find intersection point of slow and fast pointers
    for {
        slow = nums[slow]           // Move one step
        fast = nums[nums[fast]]     // Move two steps
        if slow == fast {
            break
        }
    }
    
    // Phase 2: Find entrance to the cycle
    fast = nums[0]
    for slow != fast {
        slow = nums[slow]
        fast = nums[fast]
    }
    
    return slow
}


2. Merge Intervals: Given a collection of intervals, merge all overlapping intervals.

func merge(intervals [][]int) [][]int {
    // Handle empty input
    if len(intervals) == 0 {
        return [][]int{}
    }
    
    // Sort intervals based on start time
    sort.Slice(intervals, func(i, j int) bool {
        return intervals[i][0] < intervals[j][0]
    })
    
    // Initialize merged slice with first interval
    merged := make([][]int, 0)
    merged = append(merged, intervals[0])
    
    // Iterate through remaining intervals
    for i := 1; i < len(intervals); i++ {
        current := intervals[i]
        lastMerged := merged[len(merged)-1]
        
        // If current interval overlaps with last merged interval
        if current[0] <= lastMerged[1] {
            // Update end time of last merged interval
            lastMerged[1] = max(lastMerged[1], current[1])
        } else {
            // Add new interval to merged slice
            merged = append(merged, current)
        }
    }
    
    return merged
}

3. Maximum Subarray: Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

func maxSubArray(nums []int) int {
    // Handle empty array case
    if len(nums) == 0 {
        return 0
    }
    
    maxSum := nums[0]
    currentSum := nums[0]
    
    // Iterate through array starting from second element
    for i := 1; i < len(nums); i++ {
        // Either start new subarray or extend existing one
        currentSum = max(nums[i], currentSum + nums[i])
        // Update maximum sum if current sum is larger
        maxSum = max(maxSum, currentSum)
    }
    
    return maxSum
}

// Helper function to find maximum of two integers
func max(a, b int) int {
    if a > b {
        return a
    }
    return b
}

func main() {
    // Test cases
    nums := []int{-2, 1, -3, 4, -1, 2, 1, -5, 4}
    result := maxSubArray(nums)
    
    fmt.Printf("Input array: %v\n", nums)
    fmt.Printf("Maximum subarray sum: %d\n", result)
    
    // Additional test case
    nums2 := []int{5, 4, -1, 7, 8}
    result2 := maxSubArray(nums2)
    fmt.Printf("\nInput array: %v\n", nums2)
    fmt.Printf("Maximum subarray sum: %d\n", result2)
}


4. Two Sum: Given an array of integers, return indices of the two numbers such that they add up to a specific target.

func twoSum(nums []int, target int) []int {
        m := make(map[int]int)

        for i, num := range nums {
                complement := target - num

                if j, ok := m[complement]; ok {
                        return []int{j, i}
                }
                m[num] = i
        }
        return []int{}
}


5. Rotate Array: Rotate an array to the right by k steps, where k is non-negative.

func rotate(nums []int, k int) {
    k = k % len(nums)
    reverse(nums, 0, len(nums)-1)
    reverse(nums, 0, k-1)
    reverse(nums, k, len(nums)-1)
}

func reverse(nums []int, start, end int) {
    for start < end {
        nums[start], nums[end] = nums[end], nums[start]
        start++
        end--
    }
}
6. Spiral Matrix: Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

func spiralOrder(matrix [][]int) []int {
    // Handle empty matrix
    if len(matrix) == 0 {
        return []int{}
    }
    
    // Initialize result slice and boundaries
    result := make([]int, 0)
    rowBegin := 0
    rowEnd := len(matrix) - 1
    colBegin := 0
    colEnd := len(matrix[0]) - 1
    
    // Traverse in spiral order
    for rowBegin <= rowEnd && colBegin <= colEnd {
        // Traverse right
        for j := colBegin; j <= colEnd; j++ {
            result = append(result, matrix[rowBegin][j])
        }
        rowBegin++
        
        // Traverse down
        for i := rowBegin; i <= rowEnd; i++ {
            result = append(result, matrix[i][colEnd])
        }
        colEnd--
        
        // Traverse left
        if rowBegin <= rowEnd {
            for j := colEnd; j >= colBegin; j-- {
                result = append(result, matrix[rowEnd][j])
            }
            rowEnd--
        }
        
        // Traverse up
        if colBegin <= colEnd {
            for i := rowEnd; i >= rowBegin; i-- {
                result = append(result, matrix[i][colBegin])
            }
            colBegin++
        }
    }
    
    return result
}

func main() {
    // Test cases
    matrix1 := [][]int{
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 9},
    }
    
    matrix2 := [][]int{
        {1, 2, 3, 4},
        {5, 6, 7, 8},
        {9, 10, 11, 12},
    }
    
    fmt.Printf("Matrix 1:\n")
    printMatrix(matrix1)
    fmt.Printf("Spiral order: %v\n\n", spiralOrder(matrix1))
    
    fmt.Printf("Matrix 2:\n")
    printMatrix(matrix2)
    fmt.Printf("Spiral order: %v\n", spiralOrder(matrix2))
}

// Helper function to print matrix
func printMatrix(matrix [][]int) {
    for _, row := range matrix {
        fmt.Println(row)
    }
}


7. First Missing Positive: Given an unsorted integer array, find the smallest missing positive integer.

func firstMissingPositive(nums []int) int {
        n := len(nums)
        for i := 0; i < n; i++ {
                for nums[i] > 0 && nums[i] <= n && nums[nums[i]-1] != nums[i] {
                        nums[i], nums[nums[i]-1] = nums[nums[i]-1], nums[i] 
                }
        }
        for i := 0; i < n; i++ {
                if nums[i] != i+1 {
                        return i + 1
                }
        }
        return n + 1
}

alternative
-----------

func firstMissingPositive(nums []int, n int) int {
        // Sort the array in ascending order
        sort.Ints(nums)

        missing := 1
        for i := 0; i < n; i++ {
                if nums[i] == missing { 
                        missing++ 
                } else if nums[i] > missing { 
                        return missing
                }
        }
        return missing
}

8. Product of Array Except Self: Given an array nums of n integers where n > 1, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

func productExceptSelf(nums []int) []int {
        n := len(nums)
        output := make([]int, n)

        // Calculate prefix products
        prefix := 1
        for i := 0; i < n; i++ {
                output[i] = prefix
                prefix *= nums[i]
        }

        // Calculate suffix products (from the right)
        suffix := 1
        for i := n - 1; i >= 0; i-- {
                output[i] *= suffix
                suffix *= nums[i]
        }

        return output
}

9. Longest Consecutive Sequence: Given an unsorted array of integers, find the length of the longest consecutive elements sequence.

func longestConsecutive(nums []int) int {
        longest := 0
        numSet := make(map[int]bool)

        // Add all numbers to the set
        for _, num := range nums {
                numSet[num] = true
        }

        for _, num := range nums {
                // If current number is the start of a sequence
                if !numSet[num-1] { 
                        currentNum := num
                        currentStreak := 1

                        // Check for consecutive numbers
                        for numSet[currentNum+1] {
                                currentNum++
                                currentStreak++
                        }

                        // Update longest streak if needed
                        if currentStreak > longest {
                                longest = currentStreak
                        }
                }
        }

        return longest
}

10. Jump Game: Given an array of non-negative integers, you are initially positioned at the first index of the array. Each element in the array represents your maximum jump length at that position. 
Determine if you are able to reach the last index.

func canJump(nums []int) bool {
        lastPos := len(nums) - 1
        for i := len(nums) - 1; i >= 0; i-- {
                if i+nums[i] >= lastPos {
                        lastPos = i
                }
        }
        return lastPos == 0
}


11. remove duplicates in sorted array

func removeDuplicates(nums []int) int {
        if len(nums) <= 1 {
                return len(nums)
        }

        i := 0
        for j := 1; j < len(nums); j++ {
                if nums[j] != nums[i] {
                        i++
                        nums[i] = nums[j]
                }
        }

        return i + 1
}


12. Contains Duplicate - Check if array has duplicate elements

func containsDuplicate(nums []int) bool {
    seen := make(map[int]bool)
    for _, num := range nums {
        if seen[num] {
            return true
        }
        seen[num] = true
    }
    return false
}


13. Find Missing Number - Find missing number in range [0,n]

func missingNumber(nums []int) int {
    n := len(nums)
    expected := n * (n + 1) / 2
    actual := 0
    for _, num := range nums {
        actual += num
    }
    return expected - actual
}

14. Merge Sorted Arrays: Merges from end to avoid overwriting. Time O(m+n), Space O(1)

func merge(nums1 []int, m int, nums2 []int, n int) {
    p1 := m - 1
    p2 := n - 1
    p := m + n - 1
    
    for p2 >= 0 {
        if p1 >= 0 && nums1[p1] > nums2[p2] {
            nums1[p] = nums1[p1]
            p1--
        } else {
            nums1[p] = nums2[p2]
            p2--
        }
        p--
    }
}

15. Move Zeroes - Move all zeroes to end maintaining order
func moveZeroes(nums []int) {
    nonZero := 0
    for i := 0; i < len(nums); i++ {
        if nums[i] != 0 {
            nums[nonZero], nums[i] = nums[i], nums[nonZero]
            nonZero++
        }
    }
}

16. Intersection of Two Arrays - Find common elements

func intersection(nums1 []int, nums2 []int) []int {
    set1 := make(map[int]bool)
    for _, num := range nums1 {
        set1[num] = true
    }
    
    result := make([]int, 0)
    seen := make(map[int]bool)
    for _, num := range nums2 {
        if set1[num] && !seen[num] {
            result = append(result, num)
            seen[num] = true
        }
    }
    return result
}


17. Given a large integer represented as an array of digits, the task is to add 1 to the number and return the resulting array. 
Each element in the array represents a single digit, and the digits are arranged from most significant to least significant.

func plusOne(digits []int) []int {
    for i := len(digits) - 1; i >= 0; i-- {
        if digits[i] < 9 {
            digits[i]++
            return digits
        }
        digits[i] = 0
    }
    return append([]int{1}, digits...)
}


18. Problem: Given an array with only 0s, 1s, and 2s in any order, sort them in-place. Think of these as three colors (red, white, blue) 
that need to be arranged in the correct order.

func sortColors(nums []int) {
    low, mid, high := 0, 0, len(nums)-1
    
    for mid <= high {
        switch nums[mid] {
        case 0:
            nums[low], nums[mid] = nums[mid], nums[low]
            low++
            mid++
        case 1:
            mid++
        case 2:
            nums[mid], nums[high] = nums[high], nums[mid]
            high--
        }
    }
}

19. Intersection: Uses hashmap to track common elements. Time O(n+m), Space O(n)

func intersection(nums1 []int, nums2 []int) []int {
    set1 := make(map[int]bool)
    for _, num := range nums1 {
        set1[num] = true
    }
    
    result := make([]int, 0)
    seen := make(map[int]bool)
    for _, num := range nums2 {
        if set1[num] && !seen[num] {
            result = append(result, num)
            seen[num] = true
        }
    }
    return result
}

20. Find element that appears once while others appear twice.

func singleNumber(nums []int) int {
    result := 0
    for _, num := range nums {
        result ^= num
    }
    return result
}



=======


C++ programs

1. Find the duplicate number

#include <vector>
#include <iostream>

int findDuplicate(std::vector<int>& nums) {
    // Initialize both pointers to first element
    int slow = nums[0];
    int fast = nums[0];
    
    // Phase 1: Find intersection point of slow and fast pointers
    do {
        slow = nums[slow];
        fast = nums[nums[fast]];
    } while (slow != fast);
    
    // Phase 2: Find entrance to the cycle
    fast = nums[0];
    while (slow != fast) {
        slow = nums[slow];
        fast = nums[fast];
    }
    
    return slow;
}

int main() {
    std::vector<int> nums = {1, 3, 4, 2, 2};
    std::cout << "Duplicate number: " << findDuplicate(nums) << std::endl;
    return 0;
}

2. Merge intervals

#include <vector>
#include <algorithm>
#include <iostream>

std::vector<std::vector<int>> mergeIntervals(std::vector<std::vector<int>>& intervals) {
    if (intervals.empty()) return {};
    
    // Sort intervals based on start time
    std::sort(intervals.begin(), intervals.end(), 
              [](const std::vector<int>& a, const std::vector<int>& b) {
                  return a[0] < b[0];
              });
    
    std::vector<std::vector<int>> merged;
    merged.emplace_back(intervals[0]);
    
    for (size_t i = 1; i < intervals.size(); ++i) {
        std::vector<int>& last = merged.back();
        if (intervals[i][0] <= last[1]) {
            last[1] = std::max(last[1], intervals[i][1]);
        } else {
            merged.emplace_back(intervals[i]);
        }
    }
    
    return merged;
}

int main() {
    std::vector<std::vector<int>> intervals = {{1,3}, {2,6}, {8,10}, {15,18}};
    auto merged = mergeIntervals(intervals);
    std::cout << "Merged intervals:" << std::endl;
    for (const auto& interval : merged) {
        std::cout << "[" << interval[0] << "," << interval[1] << "] ";
    }
    std::cout << std::endl;
    return 0;
}


3. Maximum subarray

#include <vector>
#include <algorithm>
#include <iostream>

int maxSubArray(std::vector<int>& nums) {
    if (nums.empty()) return 0;
    
    int maxSum = nums[0];
    int currentSum = nums[0];
    
    for (size_t i = 1; i < nums.size(); ++i) {
        currentSum = std::max(nums[i], currentSum + nums[i]);
        maxSum = std::max(maxSum, currentSum);
    }
    
    return maxSum;
}

int main() {
    std::vector<int> nums = {-2,1,-3,4,-1,2,1,-5,4};
    std::cout << "Maximum subarray sum: " << maxSubArray(nums) << std::endl;
    
    std::vector<int> nums2 = {5,4,-1,7,8};
    std::cout << "Maximum subarray sum: " << maxSubArray(nums2) << std::endl;
    return 0;
}

4. Two sum

#include <vector>
#include <unordered_map>
#include <iostream>

std::vector<int> twoSum(std::vector<int>& nums, int target) {
    std::unordered_map<int, int> m;
    for (size_t i = 0; i < nums.size(); ++i) {
        int complement = target - nums[i];
        if (m.find(complement) != m.end()) {
            return {static_cast<int>(m[complement]), static_cast<int>(i)};
        }
        m[nums[i]] = i;
    }
    return {};
}

int main() {
    std::vector<int> nums = {2,7,11,15};
    int target = 9;
    auto indices = twoSum(nums, target);
    std::cout << "Indices: [" << indices[0] << ", " << indices[1] << "]" << std::endl;
    return 0;
}


5. Rotate array

#include <vector>
#include <algorithm>
#include <iostream>

void reverseArray(std::vector<int>& nums, int start, int end){
    while(start < end){
        std::swap(nums[start], nums[end]);
        start++;
        end--;
    }
}

void rotate(std::vector<int>& nums, int k) {
    if(nums.empty()) return;
    k = k % nums.size();
    reverseArray(nums, 0, nums.size()-1);
    reverseArray(nums, 0, k-1);
    reverseArray(nums, k, nums.size()-1);
}

int main(){
    std::vector<int> nums = {1,2,3,4,5,6,7};
    int k = 3;
    rotate(nums, k);
    std::cout << "Rotated array: ";
    for(auto num : nums) std::cout << num << " ";
    std::cout << std::endl;
    return 0;
}


6. Spiral matrix

#include <vector>
#include <iostream>

std::vector<int> spiralOrder(std::vector<std::vector<int>>& matrix) {
    if(matrix.empty()) return {};
    
    std::vector<int> result;
    int rowBegin = 0, rowEnd = matrix.size() -1;
    int colBegin = 0, colEnd = matrix[0].size() -1;
    
    while(rowBegin <= rowEnd && colBegin <= colEnd){
        // Traverse Right
        for(int j = colBegin; j <= colEnd; ++j){
            result.push_back(matrix[rowBegin][j]);
        }
        rowBegin++;
        
        // Traverse Down
        for(int i = rowBegin; i <= rowEnd; ++i){
            result.push_back(matrix[i][colEnd]);
        }
        colEnd--;
        
        // Traverse Left
        if(rowBegin <= rowEnd){
            for(int j = colEnd; j >= colBegin; --j){
                result.push_back(matrix[rowEnd][j]);
            }
            rowEnd--;
        }
        
        // Traverse Up
        if(colBegin <= colEnd){
            for(int i = rowEnd; i >= rowBegin; --i){
                result.push_back(matrix[i][colBegin]);
            }
            colBegin++;
        }
    }
    
    return result;
}

int main(){
    std::vector<std::vector<int>> matrix1 = {
        {1,2,3},
        {4,5,6},
        {7,8,9}
    };
    auto spiral1 = spiralOrder(matrix1);
    std::cout << "Spiral order of matrix1: ";
    for(auto num : spiral1) std::cout << num << " ";
    std::cout << std::endl;
    
    std::vector<std::vector<int>> matrix2 = {
        {1,2,3,4},
        {5,6,7,8},
        {9,10,11,12}
    };
    auto spiral2 = spiralOrder(matrix2);
    std::cout << "Spiral order of matrix2: ";
    for(auto num : spiral2) std::cout << num << " ";
    std::cout << std::endl;
    return 0;
}

7. First missing positive

#include <vector>
#include <algorithm>
#include <iostream>

int firstMissingPositive(std::vector<int>& nums) {
    int n = nums.size();
    for(int i =0; i < n; ++i){
        while(nums[i] >0 && nums[i] <= n && nums[nums[i]-1] != nums[i]){
            std::swap(nums[i], nums[nums[i]-1]);
        }
    }
    for(int i =0; i < n; ++i){
        if(nums[i] != i+1){
            return i+1;
        }
    }
    return n+1;
}

int main(){
    std::vector<int> nums = {3,4,-1,1};
    std::cout << "First missing positive: " << firstMissingPositive(nums) << std::endl;
    
    std::vector<int> nums2 = {1,2,0};
    std::cout << "First missing positive: " << firstMissingPositive(nums2) << std::endl;
    return 0;
}

8. Product of array except itself

#include <vector>
#include <iostream>

std::vector<int> productExceptSelf(std::vector<int>& nums) {
    int n = nums.size();
    std::vector<int> output(n, 1);
    
    // Calculate prefix products
    int prefix = 1;
    for(int i =0; i < n; ++i){
        output[i] = prefix;
        prefix *= nums[i];
    }
    
    // Calculate suffix products and multiply
    int suffix = 1;
    for(int i = n-1; i >=0; --i){
        output[i] *= suffix;
        suffix *= nums[i];
    }
    
    return output;
}

int main(){
    std::vector<int> nums = {1,2,3,4};
    auto output = productExceptSelf(nums);
    std::cout << "Product except self: ";
    for(auto num : output) std::cout << num << " ";
    std::cout << std::endl;
    return 0;
}


9. Longest consequence sequence

#include <vector>
#include <unordered_set>
#include <algorithm>
#include <iostream>

int longestConsecutive(std::vector<int>& nums) {
    std::unordered_set<int> numSet(nums.begin(), nums.end());
    int longest = 0;
    
    for(auto num : nums){
        if(numSet.find(num -1) == numSet.end()){
            int currentNum = num;
            int currentStreak =1;
            
            while(numSet.find(currentNum +1) != numSet.end()){
                currentNum++;
                currentStreak++;
            }
            
            longest = std::max(longest, currentStreak);
        }
    }
    
    return longest;
}

int main(){
    std::vector<int> nums = {100,4,200,1,3,2};
    std::cout << "Longest consecutive sequence length: " << longestConsecutive(nums) << std::endl;
    return 0;
}

10. Jump game

#include <vector>
#include <iostream>

bool canJump(std::vector<int>& nums) {
    int lastPos = nums.size() -1;
    for(int i = nums.size()-1; i >=0; --i){
        if(i + nums[i] >= lastPos){
            lastPos = i;
        }
    }
    return lastPos == 0;
}

int main(){
    std::vector<int> nums1 = {2,3,1,1,4};
    std::cout << "Can jump: " << (canJump(nums1) ? "True" : "False") << std::endl;
    
    std::vector<int> nums2 = {3,2,1,0,4};
    std::cout << "Can jump: " << (canJump(nums2) ? "True" : "False") << std::endl;
    return 0;
}

11. Remove duplicates in sorted array

#include <vector>
#include <iostream>

int removeDuplicates(std::vector<int>& nums) {
    if(nums.empty()) return 0;
    int i =0;
    for(int j =1; j < nums.size(); ++j){
        if(nums[j] != nums[i]){
            i++;
            nums[i] = nums[j];
        }
    }
    return i +1;
}

int main(){
    std::vector<int> nums = {1,1,2};
    int length = removeDuplicates(nums);
    std::cout << "Array after removing duplicates: ";
    for(int i =0; i < length; ++i) std::cout << nums[i] << " ";
    std::cout << "\nLength: " << length << std::endl;
    return 0;
}


12. contains duplicate

#include <vector>
#include <unordered_set>
#include <iostream>

bool containsDuplicate(std::vector<int>& nums) {
    std::unordered_set<int> seen;
    for(auto num : nums){
        if(seen.find(num) != seen.end()) return true;
        seen.insert(num);
    }
    return false;
}

int main(){
    std::vector<int> nums1 = {1,2,3,1};
    std::cout << "Contains duplicate: " << (containsDuplicate(nums1) ? "True" : "False") << std::endl;
    
    std::vector<int> nums2 = {1,2,3,4};
    std::cout << "Contains duplicate: " << (containsDuplicate(nums2) ? "True" : "False") << std::endl;
    return 0;
}

13. Find missing number

#include <vector>
#include <iostream>

int missingNumber(std::vector<int>& nums) {
    int n = nums.size();
    int expected = n * (n +1) /2;
    int actual =0;
    for(auto num : nums){
        actual += num;
    }
    return expected - actual;
}

int main(){
    std::vector<int> nums = {3,0,1};
    std::cout << "Missing number: " << missingNumber(nums) << std::endl;
    
    std::vector<int> nums2 = {0,1};
    std::cout << "Missing number: " << missingNumber(nums2) << std::endl;
    return 0;
}


14. Merge sorted arrays

#include <vector>
#include <iostream>

void merge(std::vector<int>& nums1, int m, std::vector<int>& nums2, int n) {
    int p1 = m -1, p2 = n -1, p = m + n -1;
    while(p2 >=0){
        if(p1 >=0 && nums1[p1] > nums2[p2]){
            nums1[p] = nums1[p1];
            p1--;
        }
        else{
            nums1[p] = nums2[p2];
            p2--;
        }
        p--;
    }
}

int main(){
    std::vector<int> nums1 = {1,2,3,0,0,0};
    int m =3;
    std::vector<int> nums2 = {2,5,6};
    int n =3;
    merge(nums1, m, nums2, n);
    std::cout << "Merged array: ";
    for(auto num : nums1) std::cout << num << " ";
    std::cout << std::endl;
    return 0;
}

15. Move zeroes

#include <vector>
#include <iostream>

void moveZeroes(std::vector<int>& nums) {
    int nonZero =0;
    for(int i =0; i < nums.size(); ++i){
        if(nums[i] !=0){
            std::swap(nums[nonZero], nums[i]);
            nonZero++;
        }
    }
}

int main(){
    std::vector<int> nums = {0,1,0,3,12};
    moveZeroes(nums);
    std::cout << "Array after moving zeroes: ";
    for(auto num : nums) std::cout << num << " ";
    std::cout << std::endl;
    return 0;
}

16. Intersection of two arrays

#include <vector>
#include <unordered_set>
#include <iostream>

std::vector<int> intersection(std::vector<int>& nums1, std::vector<int>& nums2) {
    std::unordered_set<int> set1(nums1.begin(), nums1.end());
    std::unordered_set<int> seen;
    std::vector<int> result;
    
    for(auto num : nums2){
        if(set1.find(num) != set1.end() && seen.find(num) == seen.end()){
            result.push_back(num);
            seen.insert(num);
        }
    }
    
    return result;
}

int main(){
    std::vector<int> nums1 = {1,2,2,1};
    std::vector<int> nums2 = {2,2};
    auto intersect = intersection(nums1, nums2);
    std::cout << "Intersection: ";
    for(auto num : intersect) std::cout << num << " ";
    std::cout << std::endl;
    return 0;
}

17. Plus one

#include <vector>
#include <iostream>

std::vector<int> plusOne(std::vector<int>& digits) {
    for(int i = digits.size()-1; i >=0; --i){
        if(digits[i] <9){
            digits[i]++;
            return digits;
        }
        digits[i] =0;
    }
    digits.insert(digits.begin(), 1);
    return digits;
}

int main(){
    std::vector<int> digits = {1,2,3};
    auto result = plusOne(digits);
    std::cout << "After plus one: ";
    for(auto num : result) std::cout << num << " ";
    std::cout << std::endl;
    
    std::vector<int> digits2 = {9,9,9};
    auto result2 = plusOne(digits2);
    std::cout << "After plus one: ";
    for(auto num : result2) std::cout << num << " ";
    std::cout << std::endl;
    return 0;
}

18. Sort colors

#include <vector>
#include <iostream>

void sortColors(std::vector<int>& nums) {
    int low =0, mid =0, high = nums.size()-1;
    while(mid <= high){
        switch(nums[mid]){
            case 0:
                std::swap(nums[low], nums[mid]);
                low++;
                mid++;
                break;
            case 1:
                mid++;
                break;
            case 2:
                std::swap(nums[mid], nums[high]);
                high--;
                break;
        }
    }
}

int main(){
    std::vector<int> nums = {2,0,2,1,1,0};
    sortColors(nums);
    std::cout << "Sorted colors: ";
    for(auto num : nums) std::cout << num << " ";
    std::cout << std::endl;
    return 0;
}

19. Intersection similar to 16

#include <vector>
#include <unordered_set>
#include <iostream>

std::vector<int> intersectionDuplicate(std::vector<int>& nums1, std::vector<int>& nums2) {
    std::unordered_set<int> set1(nums1.begin(), nums1.end());
    std::unordered_set<int> seen;
    std::vector<int> result;
    
    for(auto num : nums2){
        if(set1.find(num) != set1.end() && seen.find(num) == seen.end()){
            result.push_back(num);
            seen.insert(num);
        }
    }
    
    return result;
}

int main(){
    std::vector<int> nums1 = {4,9,5};
    std::vector<int> nums2 = {9,4,9,8,4};
    auto intersect = intersectionDuplicate(nums1, nums2);
    std::cout << "Intersection: ";
    for(auto num : intersect) std::cout << num << " ";
    std::cout << std::endl;
    return 0;
}

20. Single number

#include <vector>
#include <iostream>

int singleNumber(std::vector<int>& nums) {
    int result =0;
    for(auto num : nums){
        result ^= num;
    }
    return result;
}

int main(){
    std::vector<int> nums = {2,2,1};
    std::cout << "Single number: " << singleNumber(nums) << std::endl;
    
    std::vector<int> nums2 = {4,1,2,1,2};
    std::cout << "Single number: " << singleNumber(nums2) << std::endl;
    return 0;
}


