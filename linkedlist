1. Reverse a Linked List: Implement a function to reverse a linked list. Can you do it iteratively and recursively?

ListNode* reverseList(ListNode* head) {
    ListNode *prev = nullptr, *curr = head, *next = nullptr;
    while (curr) {
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
    }
    return prev;
}

ListNode* reverseListRecursive(ListNode* head) {
    if (!head || !head->next) return head;
    ListNode* rest = reverseListRecursive(head->next);
    head->next->next = head;
    head->next = nullptr;
    return rest;
}


2. Detect Cycle in a Linked List: Write a program to detect a cycle in a linked list.

bool hasCycle(ListNode *head) {
    ListNode *slow = head, *fast = head;
    while (fast && fast->next) {
        slow = slow->next;
        fast = fast->next->next;
        if (slow == fast) return true;
    }
    return false;
}


3. Merge Two Sorted Lists: Merge two sorted linked lists into one sorted linked list.

ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
    if (!l1) return l2;
    if (!l2) return l1;
    if (l1->val < l2->val) {
        l1->next = mergeTwoLists(l1->next, l2);
        return l1;
    } else {
        l2->next = mergeTwoLists(l1, l2->next);
        return l2;
    }
}

4. Remove Nth Node From End of List: Given a linked list, remove the n-th node from the end of the list.

ListNode* removeNthFromEnd(ListNode* head, int n) {
    ListNode *dummy = new ListNode(0);
    dummy->next = head;
    ListNode *first = dummy, *second = dummy;
    for (int i = 1; i <= n + 1; i++) {
        first = first->next;
    }
    while (first) {
        first = first->next;
        second = second->next;
    }
    second->next = second->next->next;
    return dummy->next;
}

5. Intersection of Two Linked Lists: Find the node at which the intersection of two singly linked lists begins.

ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
    ListNode *a = headA, *b = headB;
    while (a != b) {
        a = a ? a->next : headB;
        b = b ? b->next : headA;
    }
    return a;
}

6. Linked List Cycle II: Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

ListNode *detectCycle(ListNode *head) {
    ListNode *slow = head, *fast = head;
    while (fast && fast->next) {
        slow = slow->next;
        fast = fast->next->next;
        if (slow == fast) {
            ListNode *ptr = head;
            while (ptr != slow) {
                ptr = ptr->next;
                slow = slow->next;
            }
            return ptr;
        }
    }
    return nullptr;
}

7. Remove Duplicates from Sorted List: Write a function to delete all duplicates such that each element appears only once in a sorted linked list.

ListNode* deleteDuplicates(ListNode* head) {
    ListNode *current = head;
    while (current && current->next) {
        if (current->val == current->next->val) {
            current->next = current->next->next;
        } else {
            current = current->next;
        }
    }
    return head;
}

8. Palindrome Linked List: Check if a singly linked list is a palindrome.

// Helper function to reverse a linked list (iteratively)
ListNode* reverseList(ListNode* head) {
    ListNode *prev = nullptr, *next = nullptr;
    while (head) {
        next = head->next;
        head->next = prev;
        prev = head;
        head = next;
    }
    return prev;
}

bool isPalindrome(ListNode* head) {
    if (!head || !head->next) return true;

    // Find the middle node using two-pointer technique
    ListNode *slow = head, *fast = head;
    while (fast->next && fast->next->next) {
        slow = slow->next;
        fast = fast->next->next;
    }

    // Reverse the second half of the list
    ListNode *middle = slow->next;
    slow->next = nullptr; // Split the list into two halves
    ListNode *reverse = reverseList(middle);

    // Compare the values in the two halves
    while (head && reverse) {
        if (head->val != reverse->val) return false;
        head = head->next;
        reverse = reverse->next;
    }

    return true;
}

9. Add Two Numbers: You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
    ListNode *dummy = new ListNode(0);
    ListNode *temp = dummy;
    int carry = 0;
    while (l1 || l2 || carry) {
        int sum = 0;
        if (l1) {
            sum += l1->val;
            l1 = l1->next;
        }
        if (l2) {
            sum += l2->val;
            l2 = l2->next;
        }
        sum += carry;
        carry = sum / 10;
        temp->next = new ListNode(sum % 10);
        temp = temp->next;
    }
    return dummy->next;
}

10. Rotate List: Given a linked list, rotate the list to the right by k places, where k is non-negative.

ListNode* rotateRight(ListNode* head, int k) {
    if (!head || !head->next || k == 0) return head;
    ListNode *current = head;
    int len = 1;
    while (current->next) {
        len++;
        current = current->next;
    }
    current->next = head;
    k = k % len;
    k = len - k;
    while (k--) current = current->next;
    head = current->next;
    current->next = nullptr;
    return head;
}

11. Find middle of linked list

/* Function to find the middle of a linked list */
struct Node *findMiddle(struct Node *head) {
    struct Node *slow_ptr = head;
    struct Node *fast_ptr = head;

    if (head == NULL) {
        return NULL; // Handle empty list case
    }

    while (fast_ptr != NULL && fast_ptr->next != NULL) {
        slow_ptr = slow_ptr->next;          // Move slow pointer one node at a time
        fast_ptr = fast_ptr->next->next;    // Move fast pointer two nodes at a time
    }

    return slow_ptr;  // When fast_ptr reaches the end, slow_ptr will be at the middle
}

12. You have two linked list merging at some point. Return the merging point of the linked list

LinkedList* mergingLinkedLists(
  LinkedList* linkedListOne, LinkedList* linkedListTwo
) 
{
  LinkedList* curr = linkedListOne;
  LinkedList* curr2 = linkedListTwo;

  while (curr != curr2) {
      if (curr == nullptr) {
        curr = linkedListTwo;
      } else {
        curr = curr->next;
      }

      if (curr2 == nullptr){
        curr2 = linkedListOne;
      } else {
        curr2 = curr2->next;
      }
    }
    return curr;
}

13. Implement stack through linked list

#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *next;
};

// Initially, the stack is empty, top is NULL
struct Node* top = NULL; 

// Stack operations 
void push(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = top;
    top = newNode;
}

int pop() {
    if (isEmpty()) return -1; // Or handle error differently
    struct Node *temp = top;
    int result = temp->data;
    top = top->next;
    free(temp);
    return result;
}

int topElement() {  // Better name than 'top' to avoid confusion
    if (isEmpty()) return -1; // Or handle error differently
    return top->data;
}

bool isEmpty() {
    return top == NULL;
}

int main() {
    // Example usage of the stack
    push(10);
    push(20);
    push(30);

    while (!isEmpty()) {
        printf("%d ", pop());
    }

    return 0;
}

14. Detect and remove loop in linked list

void removeLoop(struct Node* head) {
    struct Node *slow = head, *fast = head;

    while (fast && fast->next) {
        slow = slow->next;
        fast = fast->next->next;
        if (slow == fast) break; 
    }

    if (slow != fast) return;  // No loop

    // Reset slow to start of the list
    slow = head;
    while (slow->next != fast->next) {
        slow = slow->next;
        fast = fast->next;
    }
    fast->next = NULL; // Remove the loop
}

15. flatten list

 1 -> 2 -> 7 -> 8 -> 10 -> 12
     |         |
     3 -> 4 -> 5 -> 6
              |
              9

1 -> 3 -> 4 -> 5 -> 6 -> 2 -> 7 -> 9 -> 8 -> 10 -> 12 

struct Node* flatten(struct Node* head) {
    if (!head) return head;

    struct Node* curr = head; 
    while (curr) {
        // If current node has a child
        if (curr->child) {
            struct Node* temp = curr->next;  // Store the next node

            // Find the tail of the child list to connect
            struct Node* childTail = curr->child;
            while (childTail->next) {
                childTail = childTail->next; 
            }

            // Connect child list to current's next
            curr->child->next = curr->next; 
            curr->next = curr->child; 

            // Remove child pointer 
            curr->child = NULL; 

            // Connect tail of the child list to the stored next node
            childTail->next = temp; 
        }
        curr = curr->next; 
    }
    return head;
}

16. rotate linked list

struct Node* rotateList(struct Node* head, int k) {
    if (!head || !head->next || k == 0) return head; 

    // Find the length and tail of the list
    struct Node *tail = head;
    int len = 1;
    while (tail->next) {
        tail = tail->next;
        len++;
    }

    k = k % len;  // Handle rotations greater than the list length 
    if (k == 0) return head;

    // Connect tail to the head to form a cycle
    tail->next = head; 

    // Find the new tail (k nodes before the current head)
    for (int i = 0; i < len - k; i++) { 
        head = head->next;
    }

    // Break the cycle at the new tail
    tail = head->next;  
    head->next = NULL;

    return tail; // Return the new head
}

17. Reverse double linked list in c 

// Function to reverse a doubly linked list
struct Node* reverseList(struct Node *head) {
    struct Node *temp = NULL;
    struct Node *current = head;

    /* Swap the 'next' and 'prev' pointers of each node */
    while (current != NULL) {
        temp = current->prev;   // Store the previous node
        current->prev = current->next;  // Swap: Make 'next' the new 'prev'
        current->next = temp;           // Swap: Make the old 'prev' the new 'next'
        current = current->prev;        // Move to the 'new' previous node 
    }

    /* The 'prev' of the old head should now be the new head */
    if (temp != NULL) {
        head = temp->prev;
    }

    return head;
}

18. Given only a pointer to a node to be deleted in a singly linked list, how do you delete it? 

void deleteNode(Node* node) {
    Node* temp = node->next;
    if (temp == NULL) {
        // Edge case: The node to be deleted is the last node. 
        // We cannot delete the last node using this method.
        printf("The node to be deleted is the last node, which cannot be deleted using this method.\n");
        return;
    }
    node->data = temp->data; // Copy data from the next node to the current node
    node->next = temp->next; // Link current node to the next of next node
    free(temp); // Delete the next node
}

19. How do you sort a linked list

bubblesort

void bubbleSort(struct Node **headRef) {
    struct Node *current, **ptr;
    int swapped;

    do {
        swapped = 0;
        current = *headRef;

        while (current->next != NULL) {
            ptr = &current->next;
            if (current->data > (*ptr)->data) {
                swap(current, current->next);
                swapped = 1;
            }
            current = *ptr; 
        }
    } while (swapped);
}

// Swaps data of two nodes
void swap(struct Node *a, struct Node *b) {
    int temp = a->data;
    a->data = b->data;
    b->data = temp;
}

20. Compare linked list

int compare_linked_lists(struct node *q, struct node *r)
{
 static int flag;

 if((q==NULL ) && (r==NULL))
 {
 flag=1;
 }
 else
 {
 if(q==NULL || r==NULL)
 {
 flag=0;
 }
 if(q->data!=r->data)
 {
 flag=0;
 }
 else
 {
 compare_linked_lists(q->link,r->link);
 }
 }
 return(flag);
}

21. copy of a linked list

copy_linked_lists(struct node *q, struct node **s)
{
 if(q!=NULL)
 {
 *s=malloc(sizeof(struct node));
 (*s)->data=q->data;
 (*s)->link=NULL;
 copy_linked_list(q->link, &((*s)->link));
 }
} 

22. Free the nodes of a linked list

struct list *listptr, *nextptr;
for(listptr = head; listptr != NULL; listptr = nextptr)
{
 nextptr = listptr->next;
 free(listptr);
}
head = NULL; 

23. Write a C program to insert nodes into a linked list in a sorted fashion 

void linkedListInsertSorted(struct node** headReference, struct node* newNode)
{
 // Special case for the head end
	 if (*headReference == NULL || (*headReference)->data >= newNode->data)
	 {
		 newNode->next = *headReference;
		 *headReference = newNode;
	 }
	 else
	 {

		 // Locate the node before which the insertion is to happen!
		 struct node* current = *headReference;
		 while (current->next!=NULL && current->next->data < newNode->data)
		 {
		 	current = current->next;
		 }
		 newNode->next = current->next;
		 current->next = newNode;
	 }
} 
