1. Implementation of Stack

#include <iostream> 

#define MAX_SIZE 100

class Stack {
    int top;
    int arr[MAX_SIZE]; 

public:
    Stack() { top = -1; }
    bool push(int x);
    int pop();
    int peek();
    bool isEmpty();
};

bool Stack::push(int x) {
    if (top >= MAX_SIZE - 1) {
        std::cout << "Stack Overflow\n";
        return false;
    }
    arr[++top] = x;
    return true;
}

int Stack::pop() {
    if (top < 0) {
        std::cout << "Stack Underflow\n";
        return -1; 
    }
    return arr[top--];
}

int Stack::peek() {
    if (top < 0) {
        std::cout << "Stack is Empty\n";
        return -1; 
    }
    return arr[top];
}

bool Stack::isEmpty() {
    return (top < 0);
}

int main() {
    // Example Usage...
}

2. Balanced Parentheses Problem

#include <iostream>
#include <stack>
using namespace std;

bool areParenthesesBalanced(string expr) {
    stack<char> s;
    char x;

    for (int i = 0; i < expr.length(); i++) {
        if (expr[i] == '(' || expr[i] == '[' || expr[i] == '{') {
            s.push(expr[i]);
            continue;
        }

        if (s.empty())
            return false;

        switch (expr[i]) {
            case ')':
                x = s.top();
                s.pop();
                if (x == '{' || x == '[')
                    return false;
                break;
            case '}':
                x = s.top();
                s.pop();
                if (x == '(' || x == '[')
                    return false;
                break;
            case ']':
                x = s.top();
                s.pop();
                if (x == '(' || x == '{')
                    return false;
                break;
        }
    }

    return (s.empty());
}

// Test the function
int main() {
    string expr = "{()}[]";

    if (areParenthesesBalanced(expr))
        cout << "Balanced";
    else
        cout << "Not Balanced";

    return 0;
}

3. Reverse a String using Stack

#include <iostream>
#include <stack>
using namespace std;

void reverseString(string &str) {
    stack<char> s;

    for (char c : str) {
        s.push(c);
    }

    for (int i = 0; i < str.length(); i++) {
        str[i] = s.top();
        s.pop();
    }
}

// Test the function
int main() {
    string str = "Hello, World!";
    reverseString(str);
    cout << "Reversed string: " << str << endl;

    return 0;
}


4. Valid Parentheses: Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if open brackets are closed by the same type of brackets and in the correct order.

bool isValid(string s) {
    stack<char> stk;
    for (char c : s) {
        if (c == '(') stk.push(')');
        else if (c == '{') stk.push('}');
        else if (c == '[') stk.push(']');
        else if (stk.empty() || stk.top() != c) return false;
        else stk.pop();
    }
    return stk.empty();
}
