1. Reverse a String: Write a function to reverse a string. Can you do it without using built-in methods?

func reverseString(s string) string {
    runes := []rune(s)
    i, j := 0, len(runes)-1
    for i < j {
        runes[i], runes[j] = runes[j], runes[i]
        i++
        j--
    }
    return string(runes)
}


2. Check for Palindrome: Determine if a given string is a palindrome (reads the same backward as forward).

func isPalindrome(s string) bool {
    runes := []rune(s)
    i, j := 0, len(runes)-1
    for i < j {
        if runes[i] != runes[j] {
            return false
        }
        i++
        j--
    }
    return true
}

3. Anagram Check: Write a method to check if two strings are anagrams of each other (contain the same letters in a different order).

func isAnagram(s string, t string) bool {
    if len(s) != len(t) {
        return false
    }
    count := make(map[rune]int)
    for _, c := range s {
        count[c]++
    }
    for _, c := range t {
        count[c]--
    }
    for _, v := range count {
        if v != 0 {
            return false
        }
    }
    return true
}


4. Find the First Non-Repeated Character: In a string, find the first character that does not repeat itself.

func firstUniqChar(s string) int {
    count := make(map[rune]int)
    for _, c := range s {
        count[c]++
    }
    for i, c := range s {
        if count[c] == 1 {
            return i
        }
    }
    return -1
}

5. String to Integer (atoi): Implement a function that converts a string to an integer, handling possible edge cases (like invalid input or overflow).

int atoi(const char *str) {
    int result = 0, sign = 1;

    // Skip leading whitespace
    while (*str == ' ') str++;

    // Check for sign
    if (*str == '-' || *str == '+') sign = (*str++ == '-') ? -1 : 1;

    // Convert digits with overflow protection
    while (*str >= '0' && *str <= '9') {
        int digit = *str++ - '0';
        if (result > INT_MAX / 10 || (result == INT_MAX / 10 && digit > INT_MAX % 10)) {
            return sign == 1 ? INT_MAX : INT_MIN;
        }
        result = result * 10 + digit;
    }
    return result Â  
 * sign;
}

6. Longest Substring Without Repeating Characters: Find the length of the longest substring in a given string that does not have repeating characters.

func lengthOfLongestSubstring(s string) int {
        // Create a map to store the last seen index of each character
        lastSeen := make(map[byte]int)
        start, maxLength := 0, 1

        for i := 0; i < len(s); i++ {
                // If the current character has been seen before
                if lastSeen[s[i]] >= start {
                        // Update the starting index to the last seen index + 1
                        start = lastSeen[s[i]] + 1
                }

                // Update the last seen index of the current character
                lastSeen[s[i]] = i

                // Update the maximum length if necessary
                maxLength = max(maxLength, i-start+1)
        }

        return maxLength
}

7. Longest Palindromic Substring: Find the longest substring in a given string which is a palindrome.

string longestPalindrome(string s) {
    if (s.empty()) return "";
    int start = 0, end = 0;
    for (int i = 0; i < s.size(); i++) {
        int len1 = expandFromCenter(s, i, i);
        int len2 = expandFromCenter(s, i, i + 1);
        int len = max(len1, len2);
        if (len > end - start) {
            start = i - (len - 1) / 2;
            end = i + len / 2;
        }
    }
    return s.substr(start, end - start + 1);
}

int expandFromCenter(string& s, int left, int right) {
    while (left >= 0 && right < s.size() && s[left] == s[right]) {
        left--;
        right++;
    }
    return right - left - 1;
}

8. Count and Say: Implement the 'count and say' sequence. For example, the sequence begins 1, 11, 21, 1211, 111221, ...

string countAndSay(int n) {
    if (n == 1) return "1";
    string prev = countAndSay(n - 1), result = "";
    for (int i = 0; i < prev.length(); i++) {
        int count = 1;
        while (i + 1 < prev.length() && prev[i] == prev[i + 1]) {
            count++;
            i++;
        }
        result += to_string(count) + prev[i];
    }
    return result;
}

9. Valid Parentheses: Given a string containing characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if open brackets are closed by the same type of brackets and in the correct order.

bool isValid(string s) {
    stack<char> st;
    for (char c : s) {
        if (c == '(' || c == '{' || c == '[') {
            st.push(c);
        } else {
            if (st.empty() || (c == ')' && st.top() != '(') || 
                (c == '}' && st.top() != '{') || (c == ']' && st.top() != '[')) {
                return false;
            }
            st.pop();
        }
    }
    return st.empty();
}

10. String Compression: Implement a method to perform basic string compression using the counts of repeated characters. For example, the string "aabcccccaaa" would become "a2b1c5a3". 
If the "compressed" string would not become smaller than the original string, your method should return the original string.

int compress(vector<char>& chars) {
    int i = 0, count = 1;
    for (int j = 1; j <= chars.size(); j++) {
        if (j < chars.size() && chars[j] == chars[j - 1]) {
            count++;
        } else {
            chars[i++] = chars[j - 1];
            if (count > 1) {
                for (char c : to_string(count)) 
                    chars[i++] = c;
                count = 1;
            }
        }
    }

11. Remove duplicates from a string in C

char *remove_duplicates(char *str) {
    int len = strlen(str);
    int hash[256] = {0}; // Assuming ASCII characters
    int index = 0;

    for (int i = 0; i < len; i++) {
        if (hash[str[i]] == 0) {
            str[index++] = str[i];
            hash[str[i]] = 1;
        }
    }
    str[index] = '\0'; // Terminate the modified string
    return str;
}
    return i;
}

12. reverse a string in c

void reverse_string(char *str) {
    int len = strlen(str);
    char temp[len + 1]; // +1 for the null terminator

    int i;
    for (i = 0; i < len; i++) {
        temp[i] = str[len - 1 - i];
    }
    temp[len] = '\0'; 

    strcpy(str, temp); // Copy back to the original string
}

13. reverse a sentence 

std::string reverse_sentence(const std::string& sentence) {
    std::string result = sentence;

    // Reverse each individual word
    int wordStart = 0;
    for (int i = 0; i <= result.size(); i++) {
        if (result[i] == ' ' || i == result.size()) {
            std::reverse(result.begin() + wordStart, result.begin() + i);
            wordStart = i + 1; // Update start of the next word
        }
    }
    return result;
}

14. Implement memmove function

void *my_memmove(void *dest, const void *src, size_t n) {
    if (dest == NULL || src == NULL) {
        return NULL; // Handle null pointer errors
    }

    // Unsigned char pointers for byte-wise operations
    unsigned char *d = (unsigned char *)dest;
    const unsigned char *s = (const unsigned char *)src;

    // If source and destination overlap, handle copying in the right direction
    if (s + n > d) {
        s += n - 1;  // Start from the end of the source
        d += n - 1;  // Start from the end of the destination
        while (n--) {
            *d-- = *s--; // Copy in reverse order
        }
    } else {
        // If there's no overlap, copy directly
        while (n--) {
            *d++ = *s++; // Copy in forward order
        }
    }
    return dest; // Return the original destination pointer
}

15. Implement strcpy function

char *mystrcpy(char *dst, const char *src)
{
 char *ptr;
 ptr = dst;
 while(*dst++=*src++);
 return(ptr);
} 

16. Implement substr() function

char *strstr(const char *haystack, const char *needle) {
    int haystackLen = strlen(haystack);
    int needleLen = strlen(needle);

    // Base case: Empty needle
    if (needleLen == 0) {
        return (char *)haystack; // Substring is always present in this case
    }

    // Iterate through the haystack
    for (int i = 0; i <= haystackLen - needleLen; i++) {
        // Check if the current substring matches the needle
        int j;
        for (j = 0; j < needleLen; j++) {
            if (haystack[i + j] != needle[j]) {
                break; // Mismatch found, move to the next position
            }
        }

        // If we iterated through the entire needle, we have a match!
        if (j == needleLen) {
            return (char *)haystack + i; // Return pointer to the start of the substring
        }
    }

    // No match found
    return NULL; 
}

17. Implement strcmp function

int mystrcmp(const char *s1, const char *s2)
{
 while (*s1==*s2)
 {
 if(*s1=='\0')
    return(0);
 s1++;
 s2++;
 }
 return(*s1-*s2);
} 

18. Implement strdup function 

char *mystrdup(char *s)
{
 char *result = (char*)malloc(strlen(s) + 1);
 if (result == (char*)0){return (char*)0;}
   strcpy(result, s);
 return result;
} 

19. Implement strlen function

int my_strlen(char *s)
{
 char *p=s;
 while(*p!='\0')
   p++;
 return(p-s);
} 

20. Implement strcat function

char *myStrcat(char *s, const char *t)
{
 char *p = s;
 if (s == NULL || t == NULL)
  return s; /* we need not have to do anything */
 while (*s)
  s++;
 while (*s++ = *t++)
  ;
 return p;
} 

21. Factorial of program

fact(int n)
{
 int fact;
 if(n==1)
  return(1);
 else
  fact = n * fact(n-1);
 return(fact);
} 

21. Split a string equally

#define maxLineSize 20
split(char *string)
{
	 int i, length;
	 char dest[maxLineSize + 1];
	 i = 0;
	 length = strlen(string);
	 while((i+maxLineSize) <= length)
	 {
		 strncpy(dest, (string+i), maxLineSize);
		 dest[maxLineSize - 1] = '\0';
		 i = i + strlen(dest) - 1;
		 printf("\nChunk : [%s]\n", dest);
	 }
	 strcpy(dest, (string + i));
	 printf("\nChunk : [%s]\n", dest);
} 

22. Check if a string is subset of another

int isSubset(char *a, char *b)
{
 int letterPresent[256];
 int i;

 for(i=0; i<256; i++)
 	letterPresent[i]=0;
 for(i=0; a[i]!='\0'; i++)
 	letterPresent[a[i]]++;
 for(i=0; b[i]!='\0'; i++)
 	if(!letterPresent[b[i]])
 		return(1);
 return(0);
} 

23.Longest Common Prefix
// Problem: Find the longest common prefix string amongst an array of strings

func longestCommonPrefix(strs []string) string {
    if len(strs) == 0 {
        return ""
    }
    
    // Use first string as initial prefix
    prefix := strs[0]
    
    // Compare with other strings
    for i := 1; i < len(strs); i++ {
        // While current string doesn't start with prefix
        for !strings.HasPrefix(strs[i], prefix) {
            // Shorten prefix by one character
            prefix = prefix[:len(prefix)-1]
            if prefix == "" {
                return ""
            }
        }
    }
    
    return prefix
}

24. Problem: Group strings that are anagrams of each other.

func groupAnagrams(strs []string) [][]string {
    groups := make(map[string][]string)
    
    for _, str := range strs {
        chars := []rune(str)
        sort.Slice(chars, func(i, j int) bool {
            return chars[i] < chars[j]
        })
        sorted := string(chars)
        groups[sorted] = append(groups[sorted], str)
    }
    
    result := make([][]string, 0, len(groups))
    for _, group := range groups {
        result = append(result, group)
    }
    return result
}

25. Problem: Find length of longest substring without repeating characters.

func lengthOfLongestSubstring(s string) int {
    seen := make(map[rune]int)
    maxLen := 0
    start := 0
    
    for i, ch := range s {
        if lastIndex, exists := seen[ch]; exists && lastIndex >= start {
            start = lastIndex + 1
        }
        seen[ch] = i
        if i-start+1 > maxLen {
            maxLen = i - start + 1
        }
    }
    return maxLen
}

26. Check an ip address is valid

func isIpValid(ip string)string{
    split := strings.Split(ip, ".")
    
    if len(split) != 4{
        return "failure"
    }
    
    for _, value := range split{
        if value[0] <= 0{
            return "failure"
        }
        num, err := strconv.Atoi(value)
        if err != nil || num < 0 || num > 255{
            return "failure"
        }
    }
    return "success"
}


func checkIpAddr(ip string) string {
	// Regex to match a valid IPv4 address
	regex := `^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])$`
	match, _ := regexp.MatchString(regex, ip)

	if match {
		return "success"
	}
	return "failure"
}

C++
====

1. Reverse string

#include <string>
using namespace std;

string reverseString(string s) {
    int i = 0, j = s.length() - 1;
    while (i < j) {
        swap(s[i], s[j]);
        i++;
        j--;
    }
    return s;
}

2. Check for palindrome

#include <string>
using namespace std;

bool isPalindrome(string s) {
    int i = 0, j = s.length() - 1;
    while (i < j) {
        if (s[i] != s[j]) {
            return false;
        }
        i++;
        j--;
    }
    return true;
}

3. Anagram check

#include <string>
#include <map>
using namespace std;

bool isAnagram(string s, string t) {
    if (s.length() != t.length()) return false;
    map<char, int> count;
    for (char c : s) count[c]++;
    for (char c : t) count[c]--;
    for (auto& pair : count) {
        if (pair.second != 0) return false;
    }
    return true;
}

4. Find first non-repating character

#include <string>
#include <map>
using namespace std;

int firstUniqChar(string s) {
    map<char, int> count;
    for (char c : s) count[c]++;
    for (int i = 0; i < s.length(); i++) {
        if (count[s[i]] == 1) return i;
    }
    return -1;
}

5. string into integer

#include <string>
#include <climits>
using namespace std;

int atoi(string str) {
    int result = 0, sign = 1;
    size_t i = 0;
    while (i < str.length() && str[i] == ' ') i++;
    if (i < str.length() && (str[i] == '-' || str[i] == '+')) {
        sign = (str[i++] == '-') ? -1 : 1;
    }
    while (i < str.length() && str[i] >= '0' && str[i] <= '9') {
        int digit = str[i++] - '0';
        if (result > INT_MAX / 10 || (result == INT_MAX / 10 && digit > INT_MAX % 10)) {
            return sign == 1 ? INT_MAX : INT_MIN;
        }
        result = result * 10 + digit;
    }
    return result * sign;
}

6. Longest substring without repeating characters

#include <string>
#include <map>
using namespace std;

int lengthOfLongestSubstring(string s) {
    map<char, int> lastSeen;
    int start = 0, maxLength = 0;
    for (int i = 0; i < s.length(); i++) {
        if (lastSeen.find(s[i]) != lastSeen.end() && lastSeen[s[i]] >= start) {
            start = lastSeen[s[i]] + 1;
        }
        lastSeen[s[i]] = i;
        maxLength = max(maxLength, i - start + 1);
    }
    return maxLength;
}

7. Longest palindromic strings

#include <string>
using namespace std;

string longestPalindrome(string s) {
    if (s.empty()) return "";
    int start = 0, end = 0;
    for (int i = 0; i < s.length(); i++) {
        int len1 = expandFromCenter(s, i, i);
        int len2 = expandFromCenter(s, i, i + 1);
        int len = max(len1, len2);
        if (len > end - start) {
            start = i - (len - 1) / 2;
            end = i + len / 2;
        }
    }
    return s.substr(start, end - start + 1);
}

int expandFromCenter(string s, int left, int right) {
    while (left >= 0 && right < s.length() && s[left] == s[right]) {
        left--;
        right++;
    }
    return right - left - 1;
}

8. Count and say

#include <string>
using namespace std;

string longestPalindrome(string s) {
    if (s.empty()) return "";
    int start = 0, end = 0;
    for (int i = 0; i < s.length(); i++) {
        int len1 = expandFromCenter(s, i, i);
        int len2 = expandFromCenter(s, i, i + 1);
        int len = max(len1, len2);
        if (len > end - start) {
            start = i - (len - 1) / 2;
            end = i + len / 2;
        }
    }
    return s.substr(start, end - start + 1);
}

int expandFromCenter(string s, int left, int right) {
    while (left >= 0 && right < s.length() && s[left] == s[right]) {
        left--;
        right++;
    }
    return right - left - 1;
}

9. Valid paranthesis

#include <string>
#include <stack>
using namespace std;

bool isValid(string s) {
    stack<char> st;
    for (char c : s) {
        if (c == '(' || c == '{' || c == '[') {
            st.push(c);
        } else {
            if (st.empty() || (c == ')' && st.top() != '(') || 
                (c == '}' && st.top() != '{') || (c == ']' && st.top() != '[')) {
                return false;
            }
            st.pop();
        }
    }
    return st.empty();
}

10. String compression

#include <vector>
#include <string>
using namespace std;

int compress(vector<char>& chars) {
    int i = 0, count = 1;
    for (int j = 1; j <= chars.size(); j++) {
        if (j < chars.size() && chars[j] == chars[j - 1]) {
            count++;
        } else {
            chars[i++] = chars[j - 1];
            if (count > 1) {
                for (char c : to_string(count)) 
                    chars[i++] = c;
                count = 1;
            }
        }
    }
    return i;
}

11. Remove duplicates from a string

#include <cstring>
using namespace std;

char* remove_duplicates(char* str) {
    int len = strlen(str);
    int hash[256] = {0};
    int index = 0;

    for (int i = 0; i < len; i++) {
        if (hash[str[i]] == 0) {
            str[index++] = str[i];
            hash[str[i]] = 1;
        }
    }
    str[index] = '\0';
    return str;
}

12. Reverse a string in c

#include <cstring>
using namespace std;

void reverse_string(char* str) {
    int len = strlen(str);
    char temp[len + 1];
    for (int i = 0; i < len; i++) {
        temp[i] = str[len - 1 - i];
    }
    temp[len] = '\0';
    strcpy(str, temp);
}

13. Reverse a sentence

#include <string>
#include <algorithm>
using namespace std;

string reverse_sentence(const string& sentence) {
    string result = sentence;
    int wordStart = 0;
    for (int i = 0; i <= result.size(); i++) {
        if (result[i] == ' ' || i == result.size()) {
            reverse(result.begin() + wordStart, result.begin() + i);
            wordStart = i + 1;
        }
    }
    return result;
}

14. Implement memmove function

#include <cstring>
using namespace std;

void* my_memmove(void* dest, const void* src, size_t n) {
    if (dest == NULL || src == NULL) return NULL;
    unsigned char* d = (unsigned char*)dest;
    const unsigned char* s = (const unsigned char*)src;
    if (s + n > d) {
        s += n - 1;
        d += n - 1;
        while (n--) *d-- = *s--;
    } else {
        while (n--) *d++ = *s++;
    }
    return dest;
}

15. strcpy

#include <cstring>
using namespace std;

char* mystrcpy(char* dst, const char* src) {
    char* ptr = dst;
    while (*dst++ = *src++);
    return ptr;
}

16. substr

#include <cstring>
using namespace std;

char* strstr(const char* haystack, const char* needle) {
    int haystackLen = strlen(haystack);
    int needleLen = strlen(needle);
    if (needleLen == 0) return (char*)haystack;
    for (int i = 0; i <= haystackLen - needleLen; i++) {
        int j;
        for (j = 0; j < needleLen; j++) {
            if (haystack[i + j] != needle[j]) break;
        }
        if (j == needleLen) return (char*)haystack + i;
    }
    return NULL;
}

17. strcmp

#include <cstring>
using namespace std;

int mystrcmp(const char* s1, const char* s2) {
    while (*s1 == *s2) {
        if (*s1 == '\0') return 0;
        s1++;
        s2++;
    }
    return *s1 - *s2;
}

18. strdup

#include <cstring>
#include <cstdlib>
using namespace std;

char* mystrdup(char* s) {
    char* result = (char*)malloc(strlen(s) + 1);
    if (result == NULL) return NULL;
    strcpy(result, s);
    return result;
}

19. strlen

#include <cstring>
using namespace std;

int my_strlen(char* s) {
    char* p = s;
    while (*p != '\0') p++;
    return p - s;
}

20. strcat

#include <cstring>
using namespace std;

int my_strlen(char* s) {
    char* p = s;
    while (*p != '\0') p++;
    return p - s;
}

21. Factorial

int fact(int n) {
    if (n == 1) return 1;
    return n * fact(n - 1);
}

22. split a string equally

#include <cstring>
#include <cstdio>
#define maxLineSize 20

void split(char* string) {
    int i, length;
    char dest[maxLineSize + 1];
    i = 0;
    length = strlen(string);
    while ((i + maxLineSize) <= length) {
        strncpy(dest, (string + i), maxLineSize);
        dest[maxLineSize] = '\0';
        i = i + strlen(dest) - 1;
        printf("\nChunk : [%s]\n", dest);
    }
    strcpy(dest, (string + i));
    printf("\nChunk : [%s]\n", dest);
}

23. check string substr to another

#include <cstring>
using namespace std;

int isSubset(char* a, char* b) {
    int letterPresent[256] = {0};
    for (int i = 0; a[i] != '\0'; i++) letterPresent[a[i]]++;
    for (int i = 0; b[i] != '\0'; i++) {
        if (!letterPresent[b[i]]) return 1;
    }
    return 0;
}

24. Longest common prefix

#include <vector>
#include <string>
using namespace std;

string longestCommonPrefix(vector<string>& strs) {
    if (strs.empty()) return "";
    string prefix = strs[0];
    for (int i = 1; i < strs.size(); i++) {
        while (strs[i].find(prefix) != 0) {
            prefix = prefix.substr(0, prefix.length() - 1);
            if (prefix.empty()) return "";
        }
    }
    return prefix;
}

25. Group anagrams

#include <vector>
#include <string>
#include <map>
#include <algorithm>
using namespace std;

vector<vector<string>> groupAnagrams(vector<string>& strs) {
    map<string, vector<string>> groups;
    for (string str : strs) {
        string sorted = str;
        sort(sorted.begin(), sorted.end());
        groups[sorted].push_back(str);
    }
    vector<vector<string>> result;
    for (auto& group : groups) {
        result.push_back(group.second);
    }
    return result;
}

26. Check if ip address valid 

#include <string>
#include <vector>
#include <sstream>
#include <regex>
using namespace std;

string isIpValid(string ip) {
    vector<string> split;
    stringstream ss(ip);
    string segment;
    while (getline(ss, segment, '.')) {
        split.push_back(segment);
    }
    if (split.size() != 4) return "failure";
    for (string value : split) {
        if (value.empty() || value.length() > 3) return "failure";
        int num;
        try {
            num = stoi(value);
        } catch (invalid_argument&) {
            return "failure";
        }
        if (num < 0 || num > 255) return "failure";
    }
    return "success";
}

string checkIpAddr(string ip) {
    regex regex("^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])$");
    if (regex_match(ip, regex)) {
        return "success";
    }
    return "failure";
}
