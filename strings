1. Reverse a String: Write a function to reverse a string. Can you do it without using built-in methods?

void reverseString(string& s) {
    int i = 0, j = s.length() - 1;
    while (i < j) {
        swap(s[i++], s[j--]);
    }
}

2. Check for Palindrome: Determine if a given string is a palindrome (reads the same backward as forward).

bool isPalindrome(string s) {
    int i = 0, j = s.length() - 1;
    while (i < j) {
        if (s[i++] != s[j--]) return false;
    }
    return true;
}

3. Anagram Check: Write a method to check if two strings are anagrams of each other (contain the same letters in a different order).

bool isAnagram(string s, string t) {
    if (s.length() != t.length()) return false;
    int count[256] = {0};
    for (int i = 0; i < s.length(); i++) {
        count[s[i]]++;
        count[t[i]]--;
    }
    for (int c : count) {
        if (c != 0) return false;
    }
    return true;
}


4. Find the First Non-Repeated Character: In a string, find the first character that does not repeat itself.

int firstUniqChar(string s) {
    int count[256] = {0};
    for (char c : s) count[c]++;
    for (int i = 0; i < s.length(); i++) {
        if (count[s[i]] == 1) return i;
    }
    return -1;
}

5. String to Integer (atoi): Implement a function that converts a string to an integer, handling possible edge cases (like invalid input or overflow).

int myAtoi(string str) {
    int i = 0, sign = 1;
    long long result = 0;
    while (i < str.size() && str[i] == ' ') i++;
    if (i < str.size() && (str[i] == '+' || str[i] == '-')) 
        sign = (str[i++] == '+') ? 1 : -1;
    while (i < str.size() && isdigit(str[i])) {
        result = result * 10 + (str[i++] - '0');
        if (result * sign >= INT_MAX) return INT_MAX;
        if (result * sign <= INT_MIN) return INT_MIN;
    }
    return result * sign;
}

6. Longest Substring Without Repeating Characters: Find the length of the longest substring in a given string that does not have repeating characters.

int lengthOfLongestSubstring(string s) {
    vector<int> charIndex(256, -1);
    int longest = 0, start = -1;
    for (int i = 0; i < s.length(); i++) {
        if (charIndex[s[i]] > start) 
            start = charIndex[s[i]];
        charIndex[s[i]] = i;
        longest = max(longest, i - start);
    }
    return longest;
}

7. Longest Palindromic Substring: Find the longest substring in a given string which is a palindrome.

string longestPalindrome(string s) {
    if (s.empty()) return "";
    int start = 0, end = 0;
    for (int i = 0; i < s.size(); i++) {
        int len1 = expandFromCenter(s, i, i);
        int len2 = expandFromCenter(s, i, i + 1);
        int len = max(len1, len2);
        if (len > end - start) {
            start = i - (len - 1) / 2;
            end = i + len / 2;
        }
    }
    return s.substr(start, end - start + 1);
}

int expandFromCenter(string& s, int left, int right) {
    while (left >= 0 && right < s.size() && s[left] == s[right]) {
        left--;
        right++;
    }
    return right - left - 1;
}

8. Count and Say: Implement the 'count and say' sequence. For example, the sequence begins 1, 11, 21, 1211, 111221, ...

string countAndSay(int n) {
    if (n == 1) return "1";
    string prev = countAndSay(n - 1), result = "";
    for (int i = 0; i < prev.length(); i++) {
        int count = 1;
        while (i + 1 < prev.length() && prev[i] == prev[i + 1]) {
            count++;
            i++;
        }
        result += to_string(count) + prev[i];
    }
    return result;
}

9. Valid Parentheses: Given a string containing characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if open brackets are closed by the same type of brackets and in the correct order.

bool isValid(string s) {
    stack<char> st;
    for (char c : s) {
        if (c == '(' || c == '{' || c == '[') {
            st.push(c);
        } else {
            if (st.empty() || (c == ')' && st.top() != '(') || 
                (c == '}' && st.top() != '{') || (c == ']' && st.top() != '[')) {
                return false;
            }
            st.pop();
        }
    }
    return st.empty();
}

10. String Compression: Implement a method to perform basic string compression using the counts of repeated characters. For example, the string "aabcccccaaa" would become "a2b1c5a3". 
If the "compressed" string would not become smaller than the original string, your method should return the original string.

int compress(vector<char>& chars) {
    int i = 0, count = 1;
    for (int j = 1; j <= chars.size(); j++) {
        if (j < chars.size() && chars[j] == chars[j - 1]) {
            count++;
        } else {
            chars[i++] = chars[j - 1];
            if (count > 1) {
                for (char c : to_string(count)) 
                    chars[i++] = c;
                count = 1;
            }
        }
    }

11. Remove duplicates from a string in C

char *remove_duplicates(char *str) {
    int len = strlen(str);
    int hash[256] = {0}; // Assuming ASCII characters
    int index = 0;

    for (int i = 0; i < len; i++) {
        if (hash[str[i]] == 0) {
            str[index++] = str[i];
            hash[str[i]] = 1;
        }
    }
    str[index] = '\0'; // Terminate the modified string
    return str;
}
    return i;
}

12. reverse a string in c

void reverse_string(char *str) {
    int len = strlen(str);
    char temp[len + 1]; // +1 for the null terminator

    int i;
    for (i = 0; i < len; i++) {
        temp[i] = str[len - 1 - i];
    }
    temp[len] = '\0'; 

    strcpy(str, temp); // Copy back to the original string
}

13. reverse a sentence 

std::string reverse_sentence(const std::string& sentence) {
    std::string result = sentence;

    // Reverse each individual word
    int wordStart = 0;
    for (int i = 0; i <= result.size(); i++) {
        if (result[i] == ' ' || i == result.size()) {
            std::reverse(result.begin() + wordStart, result.begin() + i);
            wordStart = i + 1; // Update start of the next word
        }
    }
    return result;
}

14. Implement memmove function

void *my_memmove(void *dest, const void *src, size_t n) {
    // Cast src and dest to char pointers since we are dealing with bytes
    char *d = (char *)dest;
    const char *s = (const char *)src;

    // If the source and destination are the same, don't do anything
    if (d == s) {
        return dest;
    }

    // If destination is after source, we have to copy backwards
    // to avoid overwriting data that has not yet been copied.
    if (d > s && d < s + n) {
        d += n;
        s += n;
        while (n--) {
            *--d = *--s;
        }
    } else {
        // If destination is before source or there is no overlap, copy forwards.
        while (n--) {
            *d++ = *s++;
        }
    }

    return dest;
}

15. Implement strcpy function

char *mystrcpy(char *dst, const char *src)
{
 char *ptr;
 ptr = dst;
 while(*dst++=*src++);
 return(ptr);
} 

16. Implement substr() function

char *strstr(const char *haystack, const char *needle) {
    int haystackLen = strlen(haystack);
    int needleLen = strlen(needle);

    // Base case: Empty needle
    if (needleLen == 0) {
        return (char *)haystack; // Substring is always present in this case
    }

    // Iterate through the haystack
    for (int i = 0; i <= haystackLen - needleLen; i++) {
        // Check if the current substring matches the needle
        int j;
        for (j = 0; j < needleLen; j++) {
            if (haystack[i + j] != needle[j]) {
                break; // Mismatch found, move to the next position
            }
        }

        // If we iterated through the entire needle, we have a match!
        if (j == needleLen) {
            return (char *)haystack + i; // Return pointer to the start of the substring
        }
    }

    // No match found
    return NULL; 
}

17. Implement strcmp function

int mystrcmp(const char *s1, const char *s2)
{
 while (*s1==*s2)
 {
 if(*s1=='\0')
    return(0);
 s1++;
 s2++;
 }
 return(*s1-*s2);
} 

18. Implement strdup function 

char *mystrdup(char *s)
{
 char *result = (char*)malloc(strlen(s) + 1);
 if (result == (char*)0){return (char*)0;}
 strcpy(result, s);
 return result;
} 

19. Implement strlen function

int my_strlen(char *s)
{
 char *p=s;
 while(*p!='\0')
 p++;
 return(p-s);
} 

20. Implement strcat function

char *myStrcat(char *s, const char *t)
{
 char *p = s;
 if (s == NULL || t == NULL)
  return s; /* we need not have to do anything */
 while (*s)
  s++;
 while (*s++ = *t++)
  ;
 return p;
} 

21. Factorial of program

fact(int n)
{
 int fact;
 if(n==1)
  return(1);
 else
  fact = n * fact(n-1);
 return(fact);
} 

21. Split a string equally

#define maxLineSize 20
split(char *string)
{
	 int i, length;
	 char dest[maxLineSize + 1];
	 i = 0;
	 length = strlen(string);
	 while((i+maxLineSize) <= length)
	 {
		 strncpy(dest, (string+i), maxLineSize);
		 dest[maxLineSize - 1] = '\0';
		 i = i + strlen(dest) - 1;
		 printf("\nChunk : [%s]\n", dest);
	 }
	 strcpy(dest, (string + i));
	 printf("\nChunk : [%s]\n", dest);
} 

22. Check if a string is subset of another

int isSubset(char *a, char *b)
{
 int letterPresent[256];
 int i;
 for(i=0; i<256; i++)
 	letterPresent[i]=0;
 for(i=0; a[i]!='\0'; i++)
 	letterPresent[a[i]]++;
 for(i=0; b[i]!='\0'; i++)
 	if(!letterPresent[b[i]])
 		return(1);
 return(0);
} 
